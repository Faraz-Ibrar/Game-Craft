src/
├── Components/
│   ├── MenuManager/
│   ├── Cart.js
│   ├── CartContext.js
│   ├── CartPage.js
│   ├── Checkout.css
│   ├── Checkout.js
│   ├── CheckoutPage.js
│   ├── Footer.css
│   ├── Footer.js
│   ├── Header.css
│   ├── Header.js
│   ├── hi.txt
│   ├── OrderConfirmationPage.js
│   ├── OrderConfirmation.css
│   ├── OrderConfirmation.js
│   ├── ProductCard.css
│   ├── ProductCard.js
│   ├── ProductManager.css
│   ├── ProductPage.css
│   └── ProductPage.js
├── data/
├── services/
│   ├── api.js
│   └── cartService.js
├── App.css
├── App.js
└── index.js


import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import 'bootstrap/dist/css/bootstrap.min.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


import React from "react";
import { BrowserRouter as Router, Routes, Route, useNavigate, useLocation } from "react-router-dom";
import ProductsPage from "./Components/MenuManager/ProductPage";
import CartPage from "./Components/MenuManager/CartPage";
import CheckoutPage from "./Components/MenuManager/CheckoutPage";
import OrderConfirmationPage from "./Components/MenuManager/OrderConfirmatinPage";
import { CartProvider } from "./Components/MenuManager/CartContext";
import Header from "./Components/MenuManager/Header";
import { useCart } from "./Components/MenuManager/CartContext";
import Footer from "./Components/MenuManager/Footer";
import "./App.css";

function AppWithHeader() {
  const navigate = useNavigate();
  const location = useLocation();
  const {
    getTotalItemsInCart,
    totalAmount
  } = useCart();

  const handleCartClick = () => {
    navigate('/cart');
  };

  const getPageTitle = (pathname) => {
    switch(pathname) {
      case '/': return 'Products';
      case '/cart': return 'Shopping Cart';
      case '/checkout': return 'Checkout';
      case '/order-confirmation': return 'Order Confirmation';
      default: return 'Store';
    }
  };

  return (
    <div className="electronics-store-system">
      <Header
        cartCount={getTotalItemsInCart()}
        totalAmount={totalAmount}
        onCartClick={handleCartClick}
        showCartLoading={false}
        title={getPageTitle(location.pathname)}
      />
      <Routes>
        <Route path="/" element={<ProductsPage />} />
        <Route path="/cart" element={<CartPage />} />
        <Route path="/checkout" element={<CheckoutPage />} />
        <Route path="/order-confirmation" element={<OrderConfirmationPage />} />
      </Routes>

      <Footer></Footer>
    </div>
  );
}

export default function App() {
  return (
    <CartProvider>
      <Router basename="/Order-Management-React">
        <div className="App">
          <AppWithHeader />
        </div>
      </Router>
    </CartProvider>
  );
}


// src/services/cartService.js
import { cartAPI } from './api';

export class CartService {
  constructor() {
    this.listeners = [];
  }

  // Add listener for cart updates
  addListener(callback) {
    this.listeners.push(callback);
  }

  // Remove listener
  removeListener(callback) {
    this.listeners = this.listeners.filter(listener => listener !== callback);
  }

  // Notify all listeners of cart changes
  notifyListeners(cartData) {
    this.listeners.forEach(callback => callback(cartData));
  }

  // Get user ID from localStorage
  getUserId() {
    const userData = localStorage.getItem('userData');
    if (userData) {
      const user = JSON.parse(userData);
      return user.id || user._id;
    }
    return null;
  }

  // Get cart for authenticated user
  async getCart() {
    try {
      const userId = this.getUserId();
      if (!userId) {
        throw new Error('User not authenticated');
      }

      const cartData = await cartAPI.getCart(userId);
      this.notifyListeners(cartData);
      return cartData;
    } catch (error) {
      console.error('Error fetching cart:', error);
      throw error;
    }
  }

  // Add item to cart
  async addToCart(productData) {
    try {
      const userId = this.getUserId();
      if (!userId) {
        throw new Error('User not authenticated');
      }

      const cartData = await cartAPI.addToCart(userId, productData);
      this.notifyListeners(cartData);
      return cartData;
    } catch (error) {
      console.error('Error adding to cart:', error);
      throw error;
    }
  }

  // Update cart item quantity
  async updateCartItem(productId, quantity) {
    try {
      const userId = this.getUserId();
      if (!userId) {
        throw new Error('User not authenticated');
      }

      if (quantity <= 0) {
        return await this.removeFromCart(productId);
      }

      const cartData = await cartAPI.updateCartItem(userId, productId, quantity);
      this.notifyListeners(cartData);
      return cartData;
    } catch (error) {
      console.error('Error updating cart item:', error);
      throw error;
    }
  }

  // Remove item from cart
  async removeFromCart(productId) {
    try {
      const userId = this.getUserId();
      if (!userId) {
        throw new Error('User not authenticated');
      }

      const cartData = await cartAPI.removeFromCart(userId, productId);
      this.notifyListeners(cartData);
      return cartData;
    } catch (error) {
      console.error('Error removing from cart:', error);
      throw error;
    }
  }

  // Clear entire cart
  async clearCart() {
    try {
      const userId = this.getUserId();
      if (!userId) {
        throw new Error('User not authenticated');
      }

      const cartData = await cartAPI.clearCart(userId);
      this.notifyListeners(cartData);
      return cartData;
    } catch (error) {
      console.error('Error clearing cart:', error);
      throw error;
    }
  }

  // Calculate cart totals
  calculateTotals(cartItems) {
    if (!cartItems || !Array.isArray(cartItems)) {
      return { totalItems: 0, totalAmount: 0 };
    }

    const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);
    const totalAmount = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);

    return { totalItems, totalAmount };
  }
}

// Create and export a singleton instance
export const cartService = new CartService();
export default cartService;



// src/services/cartService.js
import { cartAPI } from './api';

export class CartService {
  constructor() {
    this.listeners = [];
  }

  // Add listener for cart updates
  addListener(callback) {
    this.listeners.push(callback);
  }

  // Remove listener
  removeListener(callback) {
    this.listeners = this.listeners.filter(listener => listener !== callback);
  }

  // Notify all listeners of cart changes
  notifyListeners(cartData) {
    this.listeners.forEach(callback => callback(cartData));
  }

  // Get user ID from localStorage
  getUserId() {
    const userData = localStorage.getItem('userData');
    if (userData) {
      const user = JSON.parse(userData);
      return user.id || user._id;
    }
    return null;
  }

  // Get cart for authenticated user
  async getCart() {
    try {
      const userId = this.getUserId();
      if (!userId) {
        throw new Error('User not authenticated');
      }

      const cartData = await cartAPI.getCart(userId);
      this.notifyListeners(cartData);
      return cartData;
    } catch (error) {
      console.error('Error fetching cart:', error);
      throw error;
    }
  }

  // Add item to cart
  async addToCart(productData) {
    try {
      const userId = this.getUserId();
      if (!userId) {
        throw new Error('User not authenticated');
      }

      const cartData = await cartAPI.addToCart(userId, productData);
      this.notifyListeners(cartData);
      return cartData;
    } catch (error) {
      console.error('Error adding to cart:', error);
      throw error;
    }
  }

  // Update cart item quantity
  async updateCartItem(productId, quantity) {
    try {
      const userId = this.getUserId();
      if (!userId) {
        throw new Error('User not authenticated');
      }

      if (quantity <= 0) {
        return await this.removeFromCart(productId);
      }

      const cartData = await cartAPI.updateCartItem(userId, productId, quantity);
      this.notifyListeners(cartData);
      return cartData;
    } catch (error) {
      console.error('Error updating cart item:', error);
      throw error;
    }
  }

  // Remove item from cart
  async removeFromCart(productId) {
    try {
      const userId = this.getUserId();
      if (!userId) {
        throw new Error('User not authenticated');
      }

      const cartData = await cartAPI.removeFromCart(userId, productId);
      this.notifyListeners(cartData);
      return cartData;
    } catch (error) {
      console.error('Error removing from cart:', error);
      throw error;
    }
  }

  // Clear entire cart
  async clearCart() {
    try {
      const userId = this.getUserId();
      if (!userId) {
        throw new Error('User not authenticated');
      }

      const cartData = await cartAPI.clearCart(userId);
      this.notifyListeners(cartData);
      return cartData;
    } catch (error) {
      console.error('Error clearing cart:', error);
      throw error;
    }
  }

  // Calculate cart totals
  calculateTotals(cartItems) {
    if (!cartItems || !Array.isArray(cartItems)) {
      return { totalItems: 0, totalAmount: 0 };
    }

    const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);
    const totalAmount = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);

    return { totalItems, totalAmount };
  }
}

// Create and export a singleton instance
export const cartService = new CartService();
export default cartService;


// frontend/src/Components/MenuManager/ProductsPage.jsx
import React from "react";
import { useNavigate } from "react-router-dom";
import { useCart } from "./CartContext";
import ProductCard from "./ProductCard";
import "./ProductManager.css";
import Carousel from 'react-bootstrap/Carousel';
import "./ProductPage.css"

export default function ProductsPage() {
  const navigate = useNavigate();
  const {
    products,
    cart,
    loading,
    orderMessage,
    addToCart,
    getTotalItemsInCart,
    totalAmount
  } = useCart();

  const handleCartClick = () => {
    navigate('/cart');
  };

  if (loading) {
    return (
      <div className="electronics-store-system">
        <div className="loading">
          <div className="loading-spinner"></div>
          <p>Loading products...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="electronics-store-system">
      {/* Hero Carousel Section */}
      <section className="hero-carousel">
        <Carousel fade>
          <Carousel.Item>
            <img
              className="d-block w-100"
              src="https://3.bp.blogspot.com/-i7nLv-n77CQ/V4xtbXSLJKI/AAAAAAAALMY/aFRBu47IpZYT2OTGBydxGVJdPCVxhmlRQCEw/w1200-h630-p-k-no-nu/gtx_980.jpg"
              alt="Electronics Store - Latest Technology"
              style={{ height: '400px', objectFit: 'cover' }}
            />
            <Carousel.Caption>
              <h3>Latest Graphic Cards</h3>
            </Carousel.Caption>
          </Carousel.Item>
          <Carousel.Item>
            <img
              className="d-block w-100"
              src="https://th.bing.com/th/id/R.5d109e68ba28aa3650cded71a263736a?rik=%2b0uTkeh3rd%2bH4A&pid=ImgRaw&r=0"
              alt="Mobile Phones and Accessories"
              style={{ height: '400px', objectFit: 'cover' }}
            />
            <Carousel.Caption>
              <h3>Modern Case</h3>
            </Carousel.Caption>
          </Carousel.Item>
          <Carousel.Item>
            <img
              className="d-block w-100"
              src="https://cdn.pixabay.com/photo/2020/09/03/20/39/headphones-5542364_1280.jpg"
              alt="Computers and Laptops"
              style={{ height: '400px', objectFit: 'cover' }}
            />
            <Carousel.Caption>
              <h3>Accessories</h3>
            </Carousel.Caption>
          </Carousel.Item>
        </Carousel>
      </section>

      <main className="main-content">
        <div className="products-header">
          <h2>Our Products</h2>
          <div className="products-count">
            {products.length} products available
          </div>
        </div>

        <div className="product-grid">
          {products.length > 0 ? (
            products.map(product => (
              <ProductCard
                key={product.id}
                product={product}
                onAddToCart={addToCart}
                isInCart={cart.some(item => item.id === product.id || item.productId === product.id)}
              />
            ))
          ) : (
            <div className="no-items">
              <h3>No products available</h3>
              <p>Please check back later for new arrivals!</p>
            </div>
          )}
        </div>
      </main>

      {orderMessage && (
        <div className={`order-message ${orderMessage.startsWith("✅") ? "success" :
          orderMessage.startsWith("❌") ? "error" :
            "info"
          }`}>
          {orderMessage}
        </div>
      )}
    </div>
  );
}


// frontend/src/Components/MenuManager/ProductCard.jsx

import React, { useState, useEffect } from "react";
import "./ProductCard.css";

const ProductCard = ({ product, onAddToCart, isInCart }) => {
  const [quantity, setQuantity] = useState(1);
  const [itemTotal, setItemTotal] = useState(product?.price || 0);

  useEffect(() => {
    setItemTotal(quantity * (product?.price || 0));
  }, [quantity, product]);

  const incrementQuantity = () => {
    setQuantity(prevCount => prevCount + 1);
  };

  const decrementQuantity = () => {
    setQuantity(prevCount => Math.max(1, prevCount - 1));
  };

  const handleAddToCart = () => {
    onAddToCart(product, quantity);
    setQuantity(1);
  };

  if (!product) {
    return <div className="product-card">Invalid product data</div>;
  }

  return (
    <div className="product-card">
      <div className="product-image-container">
        <img 
          src={product.image || '/placeholder-product.jpg'} 
          alt={product.name || 'Product'} 
          className="product-image"
          onError={(e) => {
            e.target.src = '/placeholder-product.jpg';
          }}
        />
      </div>
      
      <div className="product-content">
        <h3 className="product-title">{product.name || 'Unnamed Product'}</h3>
        
        <div className="category-brand">
          <span className="product-category">{product.category || 'Electronics'}</span>
          <span className="product-brand">Brand: {product.brand || 'Unknown'}</span>
        </div>
        
        {product.specifications && (
          <div className="specs-list">
            {product.specifications.split(',').slice(0, 3).map((spec, index) => (
              <div key={index} className="spec-item">• {spec.trim()}</div>
            ))}
          </div>
        )}
        
        <div className="price-container">
          <div className="product-price">
            Rs.{(product.price || 0).toLocaleString()}
          </div>
        </div>
        
        <div className="product-actions">
          <div className="quantity-container">
            <label className="quantity-label">Qty:</label>
            <div className="quantity-control">
              <button 
                className="qty-button" 
                onClick={decrementQuantity}
                disabled={quantity <= 1}
              >
                -
              </button>
              <input
                type="number"
                value={quantity}
                onChange={(e) => setQuantity(Math.max(1, parseInt(e.target.value) || 1))}
                min="1"
                className="qty-input"
              />
              <button 
                className="qty-button" 
                onClick={incrementQuantity}
              >
                +
              </button>
            </div>
          </div>
          
          <div className="item-total">
            Total: Rs.{itemTotal.toLocaleString()}
          </div>
          
          <button 
            className="add-to-cart-btn"
            onClick={handleAddToCart}
          >
            <span style={{ marginRight: '8px' }}>🛒</span>
            {isInCart ? 'ADD MORE' : 'ADD TO CART'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default ProductCard;


// frontend/src/Components/ProductManager/OrderConfirmation.jsx
import React from "react";
import "./OrderConfirmation.css";
import { FaCheckCircle } from 'react-icons/fa';

export default function OrderConfirmation({
  orderId,
  cart,
  deliveryTime,
  deliveryAddress,
  totalAmount,
  onBackToMenu
}) {
  const formatOrderId = (id) => {
    return id ? `#${id.slice(-8).toUpperCase()}` : "#PENDING";
  };

  const formatDeliveryTime = (time) => {
    if (!time) return "Not specified";
    const [hours, minutes] = time.split(":");
    const hour12 = hours % 12 || 12;
    const ampm = hours >= 12 ? "PM" : "AM";
    return `${hour12}:${minutes} ${ampm}`;
  };

  const getEstimatedDelivery = () => {
    const now = new Date();
    const deliveryDate = new Date(now);

    if (deliveryTime) {
      const [hours, minutes] = deliveryTime.split(":").map(Number);
      deliveryDate.setHours(hours, minutes, 0);

      if (deliveryDate <= now) {
        deliveryDate.setDate(deliveryDate.getDate() + 1);
      }
    } else {
      deliveryDate.setHours(deliveryDate.getHours() + 2);
    }

    return deliveryDate.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  return (
    <div className="order-confirmation">
      <div className="confirmation-container">
        {/* Success Header */}
        <div className="success-header">
          <div className="success-icon">
            <FaCheckCircle size={80} color="#ffdd00" />
          </div>
          <h1>Order Confirmed!</h1>
          <p className="success-message">
            Thank you for your purchase. Your order has been successfully placed.
          </p>
        </div>

        {/* Order Details Card */}
        <div className="order-details-card">
          <div className="order-header">
            <div className="order-info">
              <h2>Order Details</h2>
              <p className="order-id">Order ID: {formatOrderId(orderId)}</p>
            </div>
            <div className="order-status">
              <span className="status-badge pending">Processing</span>
            </div>
          </div>

          {/* Delivery Information */}
          <div className="delivery-info">
            <div className="info-section">
              <h3>📍 Delivery Address</h3>
              <p>{deliveryAddress || "Address not provided"}</p>
            </div>

            <div className="info-section">
              <h3>🕒 Delivery Details</h3>
              <p><strong>Time:</strong> {formatDeliveryTime(deliveryTime)}</p>
              <p><strong>Date:</strong> {getEstimatedDelivery()}</p>
            </div>
          </div>

          {/* Order Items */}
          <div className="order-items">
            <h3>📦 Items Ordered ({cart.length})</h3>
            <div className="items-list">
              {cart.map((item, index) => (
                <div key={index} className="order-item">
                  <div className="item-image">
                    <img src={item.image} alt={item.name} />
                  </div>
                  <div className="item-details">
                    <h4>{item.name}</h4>
                    <div className="item-specs">
                      <span>Qty: {item.personCount || item.quantity || 1}</span>
                      {item.serves && <span>Serves: {item.serves}</span>}
                    </div>
                  </div>
                  <div className="item-price">
                    <span className="unit-price">Rs. {item.price} each</span>
                    <span className="total-price">
                      Rs. {parseFloat((item.totalPrice || (item.price * (item.personCount || item.quantity || 1))).toFixed(2))}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Order Summary */}
          <div className="order-summary">
            <div className="summary-row">
              <span>Subtotal:</span>
              <span>Rs. {totalAmount}</span>
            </div>
            <div className="summary-row">
              <span>Delivery Fee:</span>
              <span>Free</span>
            </div>
            <div className="summary-row total">
              <span>Total Amount:</span>
              <span>Rs. {totalAmount}</span>
            </div>
          </div>
        </div>

        {/* Next Steps */}
        <div className="next-steps">
          <h3>What happens next?</h3>
          <div className="steps-grid">
            <div className="step">
              <div className="step-number">1</div>
              <div className="step-content">
                <h4>Order Processing</h4>
                <p>We're preparing your items for delivery</p>
              </div>
            </div>
            <div className="step">
              <div className="step-number">2</div>
              <div className="step-content">
                <h4>Quality Check</h4>
                <p>Each item is carefully inspected</p>
              </div>
            </div>
            <div className="step">
              <div className="step-number">3</div>
              <div className="step-content">
                <h4>Out for Delivery</h4>
                <p>Your order will be delivered on time</p>
              </div>
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="action-buttons">
          <button className="btn-secondary" onClick={onBackToMenu}>
            Continue Shopping
          </button>
          <button className="btn-primary" onClick={() => window.print()}>
            Print Receipt
          </button>
        </div>

        {/* Support Information */}
        <div className="support-info">
          <p>Need help with your order?</p>
          <div className="support-options">
            <span>📞 Call: 1-800-SUPPORT</span>
            <span>✉️ Email: support@electronicstore.com</span>
            <span>💬 Live Chat Available 24/7</span>
          </div>
        </div>
      </div>
    </div>
  );
}


// frontend/src/Components/MenuManager/OrderConfirmationPage.jsx
import React, { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useCart } from "./CartContext";
import OrderConfirmation from "./OrderConfirmation";
import "./ProductManager.css";

export default function OrderConfirmationPage() {
  const navigate = useNavigate();
  const { 
    confirmedOrder, 
    orderMessage, 
  } = useCart();

  // Redirect to home if no confirmed order
  useEffect(() => {
    if (!confirmedOrder.orderId) {
      navigate('/');
    }
  }, [confirmedOrder.orderId, navigate]);

  const handleBackToMenu = () => {
    navigate('/');
  };


  // Don't render if no confirmed order (will redirect)
  if (!confirmedOrder.orderId) {
    return null;
  }

  return (
    <div className="electronics-store-system">
      <main className="main-content">
        <OrderConfirmation
          orderId={confirmedOrder.orderId}
          cart={confirmedOrder.cart}
          deliveryAddress={confirmedOrder.deliveryAddress}
          totalAmount={confirmedOrder.totalAmount}
          onBackToMenu={handleBackToMenu}
          orderType="electronics"
        />
      </main>

      {orderMessage && (
        <div className={`order-message ${orderMessage.startsWith("✅") ? "success" :
            orderMessage.startsWith("❌") ? "error" :
              "info"
          }`}>
          {orderMessage}
        </div>
      )}
    </div>
  );
}


import { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { authAPI } from '../../services/api';
import "./Header.css";

export default function Header({
  cartCount,
  totalAmount,
  onCartClick,
  showCartLoading,
  currentPage
}) {
  const navigate = useNavigate();
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState(null);
  const [showUserMenu, setShowUserMenu] = useState(false);
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [authMode, setAuthMode] = useState('login');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: ''
  });
  const userMenuRef = useRef(null);

  // Check authentication status on component mount
  useEffect(() => {
    checkAuthStatus();
  }, []);

  // Handle Google OAuth success callback
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');
    
    if (token) {
      localStorage.setItem('authToken', token);
      // Fetch user data after successful Google login
      fetchUserProfile();
      // Clean up URL
      window.history.replaceState({}, document.title, window.location.pathname);
    }
  }, []);

  const checkAuthStatus = async () => {
    const token = localStorage.getItem('authToken');
    
    if (token) {
      try {
        await fetchUserProfile();
      } catch (error) {
        console.error('Auth check failed:', error);
        handleLogout();
      }
    }
  };

  const fetchUserProfile = async () => {
    try {
      const userData = await authAPI.getProfile();
      setIsAuthenticated(true);
      setUser(userData.user || userData);
      localStorage.setItem('userData', JSON.stringify(userData.user || userData));
    } catch (error) {
      console.error('Failed to fetch user profile:', error);
      throw error;
    }
  };

  // Close user menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (userMenuRef.current && !userMenuRef.current.contains(event.target)) {
        setShowUserMenu(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const handleLogoClick = () => {
    navigate('/');
  };

  const getPageTitle = () => {
    switch (currentPage) {
      case 'cart':
        return 'Shopping Cart';
      case 'checkout':
        return 'Checkout';
      case 'order-confirmation':
        return 'Order Confirmed';
      default:
        return '🔌 Electronics Store';
    }
  };

  const showCartIcon = currentPage !== 'order-confirmation';

  const handleInputChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const response = await authAPI.login({
        email: formData.email,
        password: formData.password
      });

      // Store tokens and user data
      localStorage.setItem('authToken', response.token);
      if (response.refreshToken) {
        localStorage.setItem('refreshToken', response.refreshToken);
      }
      localStorage.setItem('userData', JSON.stringify(response.user));

      setIsAuthenticated(true);
      setUser(response.user);
      setShowAuthModal(false);
      setFormData({ name: '', email: '', password: '', confirmPassword: '' });
    } catch (error) {
      console.error('Login error:', error);
      setError(error.response?.data?.message || 'Login failed. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleSignup = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    // Validate password confirmation
    if (formData.password !== formData.confirmPassword) {
      setError('Passwords do not match');
      setLoading(false);
      return;
    }

    try {
      const response = await authAPI.register({
        name: formData.name,
        email: formData.email,
        password: formData.password
      });

      // Store tokens and user data
      localStorage.setItem('authToken', response.token);
      if (response.refreshToken) {
        localStorage.setItem('refreshToken', response.refreshToken);
      }
      localStorage.setItem('userData', JSON.stringify(response.user));

      setIsAuthenticated(true);
      setUser(response.user);
      setShowAuthModal(false);
      setFormData({ name: '', email: '', password: '', confirmPassword: '' });
    } catch (error) {
      console.error('Signup error:', error);
      setError(error.response?.data?.message || 'Registration failed. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleLogin = () => {
    // Redirect to Google OAuth
    authAPI.googleLogin();
  };

  const handleLogout = async () => {
    try {
      await authAPI.logout();
    } catch (error) {
      console.error('Logout error:', error);
    }
    
    setIsAuthenticated(false);
    setUser(null);
    setShowUserMenu(false);
    navigate('/');
  };

  const openAuthModal = (mode) => {
    setAuthMode(mode);
    setShowAuthModal(true);
    setError('');
    setFormData({ name: '', email: '', password: '', confirmPassword: '' });
  };

  const closeAuthModal = () => {
    setShowAuthModal(false);
    setError('');
    setFormData({ name: '', email: '', password: '', confirmPassword: '' });
  };

  return (
    <>
      <header className="app-header">
        {/* Logo */}
        <div className="navbar-logo">
          <span
            className="logo-text"
            onClick={handleLogoClick}
            style={{ cursor: 'pointer' }}
          >
            GAME <span className="logo-highlight">CRAFT</span>
          </span>
        </div>

        {/* Header Actions */}
        <div className="header-actions">
          {/* Authentication Section */}
          {!isAuthenticated ? (
            <div className="auth-buttons">
              <button
                className="auth-btn login-btn"
                onClick={() => openAuthModal('login')}
              >
                <span className="auth-icon">🔑</span>
                Login
              </button>
              <button
                className="auth-btn signup-btn"
                onClick={() => openAuthModal('signup')}
              >
                <span className="auth-icon">✨</span>
                Sign Up
              </button>
            </div>
          ) : (
            <div className="user-section" ref={userMenuRef}>
              <div
                className="user-profile"
                onClick={() => setShowUserMenu(!showUserMenu)}
              >
                <div className="user-avatar">
                  {user?.name?.charAt(0).toUpperCase() || user?.email?.charAt(0).toUpperCase()}
                </div>
                <span className="user-name">{user?.name || user?.email}</span>
                <span className="dropdown-arrow">▼</span>
              </div>

              {showUserMenu && (
                <div className="user-dropdown">
                  <div className="user-info">
                    <div className="user-details">
                      <strong>{user?.name || 'User'}</strong>
                      <small>{user?.email}</small>
                    </div>
                  </div>
                  <hr className="dropdown-divider" />
                  <button className="dropdown-item">
                    <span className="item-icon">📋</span>
                    My Orders
                  </button>
                  <button className="dropdown-item">
                    <span className="item-icon">👤</span>
                    Profile
                  </button>
                  <button className="dropdown-item">
                    <span className="item-icon">⚙️</span>
                    Settings
                  </button>
                  <hr className="dropdown-divider" />
                  <button
                    className="dropdown-item logout-item"
                    onClick={handleLogout}
                  >
                    <span className="item-icon">🚪</span>
                    Logout
                  </button>
                </div>
              )}
            </div>
          )}

          {/* Cart Section */}
          {showCartIcon && (
            <>
              <div className="cart-summary">
                <span className="total-amount">Total: Rs. {totalAmount.toLocaleString()}</span>
              </div>
              <div
                className={`cart-icon ${cartCount > 0 ? 'has-items' : ''}`}
                onClick={onCartClick}
                style={{ cursor: 'pointer' }}
              >
                🛒 Cart ({cartCount})
                {showCartLoading && <span className="loading-indicator">...</span>}
              </div>
            </>
          )}
        </div>
      </header>

      {/* Authentication Modal */}
      {showAuthModal && (
        <div className="auth-modal-overlay" onClick={closeAuthModal}>
          <div className="auth-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2>{authMode === 'login' ? '🔑 Welcome Back!' : '✨ Join Game Craft'}</h2>
              <button
                className="modal-close"
                onClick={closeAuthModal}
              >
                ×
              </button>
            </div>

            {error && (
              <div className="error-message" style={{
                color: '#ff4444',
                backgroundColor: '#ffe6e6',
                padding: '10px',
                borderRadius: '5px',
                marginBottom: '15px',
                textAlign: 'center'
              }}>
                {error}
              </div>
            )}

            <form onSubmit={authMode === 'login' ? handleLogin : handleSignup}>
              {authMode === 'signup' && (
                <div className="form-group">
                  <label>Full Name</label>
                  <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    placeholder="Enter your full name"
                    required
                  />
                </div>
              )}

              <div className="form-group">
                <label>Email Address</label>
                <input
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  placeholder="Enter your email"
                  required
                />
              </div>

              <div className="form-group">
                <label>Password</label>
                <input
                  type="password"
                  name="password"
                  value={formData.password}
                  onChange={handleInputChange}
                  placeholder="Enter your password"
                  required
                />
              </div>

              {authMode === 'signup' && (
                <div className="form-group">
                  <label>Confirm Password</label>
                  <input
                    type="password"
                    name="confirmPassword"
                    value={formData.confirmPassword}
                    onChange={handleInputChange}
                    placeholder="Confirm your password"
                    required
                  />
                </div>
              )}

              <button type="submit" className="submit-btn" disabled={loading}>
                {loading ? '⏳ Processing...' : (authMode === 'login' ? '🚀 Login' : '🎯 Create Account')}
              </button>
            </form>

            <div className="modal-divider">
              <span>OR</span>
            </div>

            <button className="google-btn" onClick={handleGoogleLogin}>
              <span className="google-icon">🌐</span>
              Continue with Google
            </button>

            <div className="modal-footer">
              {authMode === 'login' ? (
                <p>
                  Don't have an account?
                  <button
                    type="button"
                    className="link-btn"
                    onClick={() => setAuthMode('signup')}
                  >
                    Sign Up
                  </button>
                </p>
              ) : (
                <p>
                  Already have an account?
                  <button
                    type="button"
                    className="link-btn"
                    onClick={() => setAuthMode('login')}
                  >
                    Login
                  </button>
                </p>
              )}
            </div>
          </div>
        </div>
      )}
    </>
  );
}


import React from 'react';
import './Footer.css';

const Footer = () => {
  return (
    <footer className="site-footer">
      <div className="footer-container">
        <div className="footer-brand">
          <h2 className="footer-logo">Game <span className="footer-highlight">Craft</span></h2>
          <p>Crafting epic gaming experiences, one click at a time.</p>
        </div>
        <div className="footer-contact">
          <h4>Contact</h4>
          <p>Email: support@gamecraft.com</p>
          <p>Phone: 051-1234567</p>
          <p>© 2025 Game Craft. All rights reserved.</p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;



// frontend/src/Components/MenuManager/CheckoutPage.jsx
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useCart } from "./CartContext";
import Checkout from "./Checkout";
import "./ProductManager.css";

export default function CheckoutPage() {
  const navigate = useNavigate();
  const [deliveryAddress, setDeliveryAddress] = useState("");
  
  const { 
    cart, 
    orderMessage, 
    totalAmount, 
    handlePlaceOrder, 
  } = useCart();

  // Redirect to cart if cart is empty
  useEffect(() => {
    if (cart.length === 0) {
      navigate('/cart');
    }
  }, [cart.length, navigate]);

  const handlePlaceOrderWrapper = async (orderData) => {
    try {
      const orderId = await handlePlaceOrder(orderData);
      if (orderId) {
        // Navigate to order confirmation page
        navigate('/order-confirmation');
      }
    } catch (error) {
      console.error('Error placing order:', error);
      // Error handling is done in CartContext
    }
  };

  const handleBack = () => {
    navigate('/cart');
  };

  // Don't render if cart is empty (will redirect)
  if (cart.length === 0) {
    return null;
  }

  return (
    <div className="electronics-store-system">
      <main className="main-content">
        <Checkout
          cart={cart}
          deliveryAddress={deliveryAddress}
          setDeliveryAddress={setDeliveryAddress}
          totalAmount={totalAmount}
          onPlaceOrder={handlePlaceOrderWrapper}
          onBack={handleBack}
          orderType="electronics"
        />
      </main>

      {orderMessage && (
        <div className={`order-message ${orderMessage.startsWith("✅") ? "success" :
            orderMessage.startsWith("❌") ? "error" :
              "info"
          }`}>
          {orderMessage}
        </div>
      )}
    </div>
  );
}

// frontend/src/Components/MenuManager/Checkout.jsx

import React, { useState } from "react";
import "./Checkout.css";

export default function Checkout({ 
  cart, 
  deliveryAddress, 
  setDeliveryAddress, 
  totalAmount, 
  onPlaceOrder, 
  onBack,
  orderType = "electronics" 
}) {
  const [customerName, setCustomerName] = useState("");
  const [customerPhone, setCustomerPhone] = useState("");
  const [customerEmail, setCustomerEmail] = useState("");
  const [paymentMethod, setPaymentMethod] = useState("cash");
  const [specialInstructions, setSpecialInstructions] = useState("");

  const getTotalItems = () => {
    return cart.reduce((total, item) => total + item.quantity, 0);
  };

const handleSubmit = (e) => {
  e.preventDefault();
  
  // Basic validation
  if (!customerName.trim()) {
    alert("Please enter your name");
    return;
  }
  
  if (!customerPhone.trim()) {
    alert("Please enter your phone number");
    return;
  }
  
  if (!deliveryAddress.trim()) {
    alert("Please enter delivery address");
    return;
  }

  // Prepare order data
  const orderData = {
    customerName: customerName.trim(),
    customerPhone: customerPhone.trim(),
    customerEmail: customerEmail.trim(),
    deliveryAddress: deliveryAddress.trim(),
    paymentMethod,
    specialInstructions: specialInstructions.trim(),
    cartItems: cart,
    totalAmount,
    deliveryCharges: 200,
    finalAmount: totalAmount + 200,
    orderType
  };

  // Debug logging
  console.log("Checkout - Order data being sent:", orderData);
  console.log("Checkout - Required fields check:");
  console.log("- customerName:", orderData.customerName);
  console.log("- customerPhone:", orderData.customerPhone);
  console.log("- finalAmount:", orderData.finalAmount);
  console.log("- deliveryAddress:", orderData.deliveryAddress);
  console.log("- cartItems length:", orderData.cartItems.length);

  // Pass the order data to parent component
  onPlaceOrder(orderData);
};

  return (
    <div className="checkout-container">
      <div className="checkout-header">
        <h2>Complete Your Order</h2>
        
      </div>

      <form onSubmit={handleSubmit} className="checkout-form">
        <div className="form-sections">
          {/* Customer Information */}
          <div className="form-section">
            <h3>Customer Information</h3>
            <div className="form-row">
              <div className="form-group">
                <label>Full Name *</label>
                <input
                  type="text"
                  value={customerName}
                  onChange={(e) => setCustomerName(e.target.value)}
                  placeholder="Enter your full name"
                  required
                />
              </div>
              <div className="form-group">
                <label>Phone Number *</label>
                <input
                  type="tel"
                  value={customerPhone}
                  onChange={(e) => setCustomerPhone(e.target.value)}
                  placeholder="03XX-XXXXXXX"
                  required
                />
              </div>
            </div>
            <div className="form-group">
              <label>Email Address (Optional)</label>
              <input
                type="email"
                value={customerEmail}
                onChange={(e) => setCustomerEmail(e.target.value)}
                placeholder="your.email@example.com"
              />
            </div>
          </div>

          {/* Delivery Information */}
          <div className="form-section">
            <h3>Delivery Information</h3>
            <div className="form-group">
              <label>Delivery Address *</label>
              <textarea
                value={deliveryAddress}
                onChange={(e) => setDeliveryAddress(e.target.value)}
                rows="3"
                placeholder="Enter complete delivery address with landmarks"
                required
              />
            </div>
            <div className="form-row">
              <div className="form-group">
                <label>Payment Method</label>
                <select
                  value={paymentMethod}
                  onChange={(e) => setPaymentMethod(e.target.value)}
                >
                  <option value="cash">Cash on Delivery</option>
                  <option value="card">Card on Delivery</option>
                  <option value="online">Online Payment</option>
                </select>
              </div>
            </div>
            <div className="form-group">
              <label>Special Instructions (Optional)</label>
              <textarea
                value={specialInstructions}
                onChange={(e) => setSpecialInstructions(e.target.value)}
                rows="2"
                placeholder="Any special delivery instructions..."
              />
            </div>
          </div>
        </div>

        {/* Order Summary */}
        <div className="order-summary">
          <h3>Order Summary</h3>
          <div className="summary-items">
            {cart.map(item => (
              <div key={item.id || item.productId} className="summary-item">
                <div className="item-info">
                  <img 
                    src={item.image || '/placeholder-product.jpg'} 
                    alt={item.name}
                    className="item-thumbnail"
                  />
                  <div className="item-details">
                    <h4>{item.name}</h4>
                    {item.brand && <p>Brand: {item.brand}</p>}
                    <p>Quantity: {item.quantity}</p>
                  </div>
                </div>
                <div className="item-price">
                  <span>Rs. {item.totalPrice.toLocaleString()}</span>
                </div>
              </div>
            ))}
          </div>
          
          <div className="summary-totals">
            <div className="summary-row">
              <span>Total Items:</span>
              <span>{getTotalItems()}</span>
            </div>
            <div className="summary-row">
              <span>Subtotal:</span>
              <span>Rs. {totalAmount.toLocaleString()}</span>
            </div>
            <div className="summary-row">
              <span>Delivery Charges:</span>
              <span>Rs. 200</span>
            </div>
            <div className="summary-row total-row">
              <span>Total Amount:</span>
              <span>Rs. {(totalAmount + 200).toLocaleString()}</span>
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="checkout-actions">
          <button type="button" className="back-btn" onClick={onBack}>
            ← Back to Cart
          </button>
          <button type="submit" className="place-order-btn">
            Place Order - Rs. {(totalAmount + 200).toLocaleString()}
          </button>
        </div>
      </form>
    </div>
  );
}

// frontend/src/Components/MenuManager/CartPage.jsx
import React from "react";
import { useNavigate } from "react-router-dom";
import { useCart } from "./CartContext";
import Cart from "./Cart";
import "./ProductManager.css";

export default function CartPage() {
  const navigate = useNavigate();
  const { 
    cart, 
    orderMessage, 
    totalAmount, 
    removeFromCart, 
    updateCartItemQuantity, 
    clearCart, 
  } = useCart();

  const handleCheckout = () => {
    if (cart.length === 0) {
      alert("Your cart is empty. Add some products first!");
      return;
    }
    navigate('/checkout');
  };

  const handleContinueShopping = () => {
    navigate('/');
  };

  return (
    <div className="electronics-store-system">
      <main className="main-content">
        <Cart
          cart={cart}
          onRemoveFromCart={removeFromCart}
          onUpdateQuantity={updateCartItemQuantity}
          onCheckout={handleCheckout}
          onContinueShopping={handleContinueShopping}
          totalAmount={totalAmount}
          onClearCart={clearCart}
          itemType="product"
        />
      </main>

      {orderMessage && (
        <div className={`order-message ${orderMessage.startsWith("✅") ? "success" :
            orderMessage.startsWith("❌") ? "error" :
              "info"
          }`}>
          {orderMessage}
        </div>
      )}
    </div>
  );
}

// frontend/src/Components/MenuManager/CartContext.jsx
import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import axios from 'axios';

// Set base URL for all axios requests
axios.defaults.baseURL = 'http://localhost:5000';

const CartContext = createContext();

export const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};

export const CartProvider = ({ children }) => {
  const [cart, setCart] = useState([]);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [cartLoading, setCartLoading] = useState(false);
  const [orderMessage, setOrderMessage] = useState("");
  const [totalAmount, setTotalAmount] = useState(0);
  const [confirmedOrder, setConfirmedOrder] = useState({
    orderId: "",
    cart: [],
    deliveryAddress: "",
    totalAmount: 0
  });

  // For now, using a static userId. In real app, get this from authentication
  const userId = "user123";

  // Helper function to safely parse numbers
  const safeParseFloat = (value, defaultValue = 0) => {
    const parsed = parseFloat(value);
    return isNaN(parsed) ? defaultValue : parsed;
  };

  // Helper function to safely parse integers
  const safeParseInt = (value, defaultValue = 0) => {
    const parsed = parseInt(value);
    return isNaN(parsed) ? defaultValue : parsed;
  };

  // Save cart to database function
  const saveCartToDatabase = async (updatedCart) => {
    try {
      const cartItems = updatedCart.map(item => ({
        productId: item.id || item.productId,
        name: item.name || '',
        brand: item.brand || '',
        image: item.image || '',
        price: safeParseFloat(item.price, 0),
        specifications: item.specifications || '',
        category: item.category || '',
        quantity: safeParseInt(item.quantity, 1),
        totalPrice: safeParseFloat(item.totalPrice, 0)
      }));

      await axios.post('/api/cart', {
        userId,
        items: cartItems
      });
    } catch (err) {
      console.error('Error saving cart to database:', err);
      setOrderMessage("Failed to save cart to server.");
    }
  };

  // FIXED: Move loadCartFromDatabase outside useEffect and wrap with useCallback
  const loadCartFromDatabase = useCallback(async () => {
    try {
      setCartLoading(true);
      const response = await axios.get(`/api/cart/${userId}`);
      if (response.data && response.data.items) {
        const transformedCart = response.data.items.map(item => {
          const quantity = safeParseInt(item.quantity, 1);
          
          return {
            id: item.productId || item.menuItemId || item.id,
            productId: item.productId || item.menuItemId || item.id,
            name: item.name || '',
            brand: item.brand || '',
            image: item.image || '',
            price: 0, // FIXED: Don't use stored price, will be updated by enrichCartWithProductData
            specifications: item.specifications || '',
            category: item.category || '',
            quantity: quantity,
            totalPrice: 0 // FIXED: Don't use stored total, will be recalculated
          };
        });
        setCart(transformedCart);
      }
    } catch (err) {
      if (err.response?.status === 404) {
        console.log('No existing cart found for user');
      } else {
        console.error('Error loading cart:', err);
        setOrderMessage("Failed to load cart from server.");
      }
    } finally {
      setCartLoading(false);
    }
  }, [userId]); // Add userId as dependency

  // FIXED: Enhanced function to merge cart data with product data for complete properties
  const enrichCartWithProductData = useCallback((cartItems, productsData) => {
    return cartItems.map(cartItem => {
      // Find matching product from products array
      const matchingProduct = productsData.find(p => 
        p.id === cartItem.id || 
        p._id === cartItem.id || 
        p.id === cartItem.productId || 
        p._id === cartItem.productId
      );

      if (matchingProduct) {
        // CRITICAL FIX: Always use the current product price, not the stored cart price
        const currentPrice = safeParseFloat(matchingProduct.price, 0);
        const quantity = safeParseInt(cartItem.quantity, 1);
        const recalculatedTotal = currentPrice * quantity;
        
        // Log price updates for debugging
        if (cartItem.price && Math.abs(currentPrice - cartItem.price) > 0.01) {
          console.log(`Price updated for ${matchingProduct.name}: ${cartItem.price} → ${currentPrice}`);
        }
        
        // Merge cart item with complete product data
        return {
          ...cartItem,
          name: cartItem.name || matchingProduct.name || '',
          brand: cartItem.brand || matchingProduct.brand || '',
          image: cartItem.image || matchingProduct.image || '',
          specifications: cartItem.specifications || matchingProduct.specifications || '',
          category: cartItem.category || matchingProduct.category || '',
          price: currentPrice, // Always use current product price
          quantity: quantity,
          totalPrice: recalculatedTotal // Recalculate based on current price
        };
      }
      
      // Return original cart item if no matching product found
      return cartItem;
    });
  }, []);

  useEffect(() => {
    // Fetch products from backend API
    setLoading(true);
    axios.get('/api/products')
      .then(res => {
        const transformedProducts = res.data.map(product => ({
          ...product,
          id: product._id,
          price: safeParseFloat(product.price, 0) // Ensure price is a valid number
        }));
        setProducts(transformedProducts);
        setLoading(false);
      })
      .catch(err => {
        setOrderMessage("Failed to load products from server. Make sure backend is running on port 5000.");
        setLoading(false);
        console.error('API Error:', err);
      });

    // Load existing cart from database
    loadCartFromDatabase();
  }, [loadCartFromDatabase]); // Add loadCartFromDatabase to dependency array

  // FIXED: New useEffect to enrich cart data when both cart and products are loaded
  useEffect(() => {
    if (cart.length > 0 && products.length > 0) {
      const enrichedCart = enrichCartWithProductData(cart, products);
      
      // Always update when products are loaded to ensure current prices
      // Check if this is the initial load (cart items have price = 0)
      const needsPriceUpdate = cart.some(item => item.price === 0);
      
      if (needsPriceUpdate) {
        console.log('Updating cart with current product prices');
        setCart(enrichedCart);
        // Save updated prices to database
        saveCartToDatabase(enrichedCart);
      } else {
        // Check for other changes
        const hasChanges = enrichedCart.some((item, index) => {
          const original = cart[index];
          return !original || 
                 Math.abs(item.price - original.price) > 0.01 || // Price changed
                 item.totalPrice !== original.totalPrice ||
                 item.name !== original.name || 
                 item.brand !== original.brand || 
                 item.image !== original.image ||
                 item.specifications !== original.specifications ||
                 item.category !== original.category;
        });
        
        if (hasChanges) {
          console.log('Updating cart due to product changes');
          setCart(enrichedCart);
          // Save updated data to database
          saveCartToDatabase(enrichedCart);
        }
      }
    }
  }, [products, enrichCartWithProductData, saveCartToDatabase]); // Only depend on products, not cart to avoid infinite loop

  useEffect(() => {
    // Safely calculate total with validation
    const total = cart.reduce((sum, item) => {
      const itemTotal = safeParseFloat(item.totalPrice, 0);
      return sum + itemTotal;
    }, 0);
    setTotalAmount(total);
  }, [cart]);

  const addToCart = async (product, quantity) => {
    // Validate inputs
    if (!product || !product.id) {
      console.error('Invalid product data');
      setOrderMessage("Invalid product data");
      return;
    }

    const validQuantity = safeParseInt(quantity, 1);
    const productPrice = safeParseFloat(product.price, 0);
    const totalPrice = validQuantity * productPrice;

    if (productPrice <= 0) {
      console.error('Invalid product price');
      setOrderMessage("Invalid product price");
      return;
    }

    const existingIndex = cart.findIndex(ci => (ci.id === product.id || ci.productId === product.id));

    let updatedCart;

    if (existingIndex >= 0) {
      updatedCart = [...cart];
      const currentQuantity = safeParseInt(updatedCart[existingIndex].quantity, 0);
      const updatedQuantity = currentQuantity + validQuantity;
      updatedCart[existingIndex] = {
        ...updatedCart[existingIndex],
        quantity: updatedQuantity,
        totalPrice: updatedQuantity * productPrice
      };
    } else {
      updatedCart = [...cart, {
        id: product.id,
        productId: product.id,
        name: product.name || '',
        brand: product.brand || '',
        image: product.image || '',
        price: productPrice,
        specifications: product.specifications || '',
        category: product.category || '',
        quantity: validQuantity,
        totalPrice
      }];
    }

    setCart(updatedCart);
    await saveCartToDatabase(updatedCart);

    setOrderMessage(`Added ${product.name} (Quantity: ${validQuantity}) to cart`);
    setTimeout(() => setOrderMessage(""), 3000);
  };

  const updateCartItemQuantity = async (itemId, newQuantity) => {
    const validQuantity = safeParseInt(newQuantity, 0);
    
    if (validQuantity <= 0) {
      await removeFromCart(itemId);
      return;
    }

    const updatedCart = cart.map(item => {
      if (item.id === itemId || item.productId === itemId) {
        const itemPrice = safeParseFloat(item.price, 0);
        return {
          ...item,
          quantity: validQuantity,
          totalPrice: validQuantity * itemPrice
        };
      }
      return item;
    });

    setCart(updatedCart);
    await saveCartToDatabase(updatedCart);
  };

  const removeFromCart = async (itemId) => {
    const updatedCart = cart.filter(item => item.id !== itemId && item.productId !== itemId);
    setCart(updatedCart);
    await saveCartToDatabase(updatedCart);

    setOrderMessage("Item removed from cart");
    setTimeout(() => setOrderMessage(""), 3000);
  };

  const clearCart = async () => {
    setCart([]);
    try {
      await axios.delete(`/api/cart/${userId}`);
      setOrderMessage("Cart cleared");
      setTimeout(() => setOrderMessage(""), 3000);
    } catch (err) {
      console.error('Error clearing cart from database:', err);
    }
  };

  const handlePlaceOrder = async (orderData) => {
    console.log("CartContext - Received order data:", orderData);

    if (!orderData) {
      console.error("CartContext - No order data received!");
      setOrderMessage("❌ Order data is missing. Please try again.");
      return;
    }

    if (!orderData.customerName || !orderData.customerPhone) {
      console.error("CartContext - Missing customer info");
      setOrderMessage("❌ Customer information is required.");
      return;
    }

    if (!orderData.deliveryAddress?.trim()) {
      console.error("CartContext - Missing delivery address");
      setOrderMessage("❌ Please provide a delivery address.");
      return;
    }

    try {
      // Validate and sanitize order amounts
      const totalAmount = safeParseFloat(orderData.totalAmount, 0);
      const deliveryCharges = safeParseFloat(orderData.deliveryCharges, 0);
      const finalAmount = safeParseFloat(orderData.finalAmount, totalAmount + deliveryCharges);

      const orderPayload = {
        userId,
        customerName: orderData.customerName || '',
        customerPhone: orderData.customerPhone || '',
        customerEmail: orderData.customerEmail || '',
        deliveryAddress: orderData.deliveryAddress || '',
        paymentMethod: orderData.paymentMethod || '',
        specialInstructions: orderData.specialInstructions || '',
        cartItems: (orderData.cartItems || []).map(item => ({
          id: item.id,
          productId: item.id || item.productId,
          name: item.name || '',
          brand: item.brand || '',
          image: item.image || '',
          price: safeParseFloat(item.price, 0),
          specifications: item.specifications || '',
          category: item.category || '',
          quantity: safeParseInt(item.quantity, 1),
          totalPrice: safeParseFloat(item.totalPrice, 0)
        })),
        totalAmount: totalAmount,
        deliveryCharges: deliveryCharges,
        finalAmount: finalAmount,
        orderType: orderData.orderType || 'electronics'
      };

      console.log('CartContext - Sending order payload to backend:', orderPayload);

      const response = await axios.post('/api/checkout', orderPayload);

      console.log('CartContext - Backend response:', response.data);

      // Store order confirmation data
      setConfirmedOrder({
        orderId: response.data.order?.orderNumber || response.data._id,
        cart: [...cart],
        deliveryAddress: orderData.deliveryAddress,
        totalAmount: finalAmount
      });

      // Clear cart after successful order
      await clearCart();

      setOrderMessage(`✅ Order placed successfully! Order ID: ${response.data.order?.orderNumber || response.data._id}`);
      
      return response.data.order?.orderNumber || response.data._id; // Return order ID for navigation
    } catch (err) {
      console.error('CartContext - Checkout Error Details:', err);
      setOrderMessage("❌ Failed to place order. Please try again.");
      throw err; // Re-throw to handle in component
    }
  };

  const getTotalItemsInCart = () => {
    return cart.reduce((total, item) => {
      const quantity = safeParseInt(item.quantity, 0);
      return total + quantity;
    }, 0);
  };

  const value = {
    cart,
    products,
    loading,
    cartLoading,
    orderMessage,
    totalAmount,
    confirmedOrder,
    setOrderMessage,
    addToCart,
    updateCartItemQuantity,
    removeFromCart,
    clearCart,
    handlePlaceOrder,
    getTotalItemsInCart,
    setConfirmedOrder
  };

  return (
    <CartContext.Provider value={value}>
      {children}
    </CartContext.Provider>
  );
};


// frontend/src/Components/MenuManager/Cart.jsx
import React from "react";
import "./Cart.css";

export default function Cart({ 
  cart, 
  onRemoveFromCart, 
  onUpdateQuantity, 
  onCheckout, 
  totalAmount, 
  onClearCart,
  onContinueShopping, // Add this prop
  itemType = "product" 
}) {
  if (cart.length === 0) {
    return (
      <div className="empty-cart">
        <div className="empty-cart-icon">🛒</div>
        <h3>Your cart is empty</h3>
        <p>Browse our electronics and add some items to get started!</p>
      </div>
    );
  }

  const getTotalItems = () => {
    return cart.reduce((total, item) => total + (item.quantity || 0), 0);
  };

  const incrementQuantity = (itemId, currentQuantity) => {
    onUpdateQuantity(itemId, currentQuantity + 1);
  };

  const decrementQuantity = (itemId, currentQuantity) => {
    if (currentQuantity > 1) {
      onUpdateQuantity(itemId, currentQuantity - 1);
    }
  };

  const handleContinueShopping = () => {
    // Use the callback function if provided, otherwise do nothing
    if (onContinueShopping) {
      onContinueShopping();
    }
  };

  // Helper function to calculate item total if totalPrice is not available
  const getItemTotal = (item) => {
    if (item.totalPrice !== undefined && item.totalPrice !== null) {
      return item.totalPrice;
    }
    const price = item.price || 0;
    const quantity = item.quantity || 0;
    return price * quantity;
  };

  return (
    <div className="cart-container">
      <div className="cart-header">
        <h2>Shopping Cart</h2>
        <div className="cart-stats">
          <span className="item-count">{getTotalItems()} items</span>
          <button className="clear-cart-btn" onClick={onClearCart}>
            Clear Cart
          </button>
        </div>
      </div>

      <div className="cart-items">
        {cart.map(item => (
          <div key={item.id || item.productId} className="cart-item">
            <div className="cart-item-image">
              <img 
                src={item.image || '/placeholder-product.jpg'} 
                alt={item.name || 'Product'}
                onError={(e) => {
                  e.target.src = '/placeholder-product.jpg';
                }}
              />
            </div>
            
            <div className="cart-item-details">
              <h4>{item.name || 'Unnamed Product'}</h4>
              {item.brand && (
                <p className="item-brand">Brand: {item.brand}</p>
              )}
              {item.specifications && (
                <p className="item-specs">
                  Specs: {item.specifications.length > 50 
                    ? `${item.specifications.substring(0, 50)}...` 
                    : item.specifications}
                </p>
              )}
              <p className="item-price">Unit Price: Rs. {(item.price || 0).toLocaleString()}</p>
            </div>

            <div className="cart-item-controls">
              <div className="quantity-controls">
                <label>Quantity:</label>
                <div className="quantity-input-group">
                  <button 
                    className="qty-btn" 
                    onClick={() => decrementQuantity(item.id || item.productId, item.quantity || 1)}
                    disabled={(item.quantity || 1) <= 1}
                  >
                    -
                  </button>
                  <input
                    type="number"
                    value={item.quantity || 1}
                    onChange={(e) => {
                      const newQty = Math.max(1, parseInt(e.target.value) || 1);
                      onUpdateQuantity(item.id || item.productId, newQty);
                    }}
                    min="1"
                    className="qty-input"
                  />
                  <button 
                    className="qty-btn" 
                    onClick={() => incrementQuantity(item.id || item.productId, item.quantity || 1)}
                  >
                    +
                  </button>
                </div>
              </div>
              
              <div className="cart-item-total">
                <p className="subtotal">Subtotal: Rs. {getItemTotal(item).toLocaleString()}</p>
                <button 
                  className="remove-btn"
                  onClick={() => onRemoveFromCart(item.id || item.productId)}
                >
                  Remove
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="cart-summary">
        <div className="summary-details">
          <div className="summary-row">
            <span>Total Items:</span>
            <span>{getTotalItems()}</span>
          </div>
          <div className="summary-row">
            <span>Subtotal:</span>
            <span>Rs. {(totalAmount || 0).toLocaleString()}</span>
          </div>
          <div className="summary-row total-row">
            <span>Total Amount:</span>
            <span>Rs. {(totalAmount || 0).toLocaleString()}</span>
          </div>
        </div>
        
        <div className="checkout-actions">
          <button 
            className="continue-shopping-btn" 
            onClick={handleContinueShopping}
          >
            Continue Shopping
          </button>
          <button className="checkout-btn" onClick={onCheckout}>
            Proceed to Checkout
          </button>
        </div>
      </div>
    </div>
  );
}